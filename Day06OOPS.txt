1. What are the six combinations of access modifier keywords and what do they do? 
  In C#, there are six combinations of access modifier keywords that control the visibility and accessibility of members and types. 
  The public modifier makes members accessible from any other code, both within and outside the assembly. 
  The private modifier restricts access to within the body of the class or struct where it is declared. 
  The protected modifier allows access within its class and by derived class instances, facilitating inheritance while keeping members hidden from other classes. 
  The internal modifier limits access to within the same project, making it useful for application-wide usage without exposing members to other applications. 
  The protected internal modifier combines protected and internal, making members accessible within its class, derived classes, and any class in the same project. 
  The private protected modifier restricts access to within its class or derived classes that are in the same project, combining private and protected access to enhance security within a single assembly and its inheritance hierarchy.

2. What is the difference between the static, const, and readonly keywords when applied to a type member?
  The static keyword makes a member belong to the class itself rather than to any specific instance, meaning it can be accessed without creating an instance of the class. 
  The const keyword defines a constant field or local variable that must be initialized at the time of declaration and cannot be changed thereafter, ensuring its value remains the same throughout the program. 
  The readonly keyword is used for fields that can only be assigned a value during their declaration or within the constructor, making them immutable after that point but allowing for different values in different instances.

3. What does a constructor do?
  A constructor is a special method of a class that initializes a new instance of the class. It typically sets initial values for the fields and performs any other setup or initialization required when an object is created. 
  Constructors have the same name as the class and do not have a return type.

4. Why is the partial keyword useful?
  The partial keyword allows the definition of a class, struct, or interface to be split across multiple files. This is useful when working with large projects. 
  It allows different aspects of a class to be developed and maintained separately.

5. What is a tuple?
  A tuple is a data structure that can hold a fixed number of items, where each item can be of different types. Tuples provide a simple way to group multiple values without having to create a specific class or struct.

6. What does the C# record keyword do?
  The record keyword in C# is used to create a reference type specifically designed to hold data. Records are immutable. Their data can't be changed once they're created. 
  They are perfect for situations where you need to store and manage data without worrying about it being modified. Two record instances with the same data are considered equal, simplifying comparisons.

7. What does overloading and overriding mean?
  Overloading allows to define multiple methods with the same name but different parameters within the same class enabling different ways to call a method. Overriding is used in inheritance to provide    a new implementation for a method in a derived class that is already defined in the base class. In this, the methods have the same name as well as the same parameters.

8. What is the difference between a field and a property?
  A field is a variable that is declared directly in a class. Fields hold data or state for an object. Example: public string address;
  A property is a member that provides a flexible mechanism to read, write, or calculate the value of a private field. Properties include logic for getting and setting values.

9. How do you make a method parameter optional?
  By providing a default value for it in the method definition.
  Example: public void Doit(string message = "Do it")

10. What is an interface and how is it different from abstract class?
An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement.
Interfaces cannot contain any implementation whereas abstract classes can have both abstract and concrete methods.
A class can implement multiple interfaces but it can inherit only one abstract class.

11. What accessibility level are members of an interface?
Interface members are public by default because the purpose of an interface is to enable other types to access a class.

12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
True

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
False. That is the function of the override keyword.

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
False. Abstract methods can only be declared in abstract classes.

16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
True.

17. True/False. Derived classes can override methods that were virtual in the base class. 
True. Using the override keyword.

18. True/False. Derived classes can override methods that were abstract in the base class. 
True.

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
False.

20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
False. It has to implement all the members of the interface.

21. True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface.
True. It can have additional members.

22. True/False. A class can have more than one base class.
False. A class can inherit from only one base class.

23. True/False. A class can implement more than one interface.
True. It can implement multiple interfaces.
